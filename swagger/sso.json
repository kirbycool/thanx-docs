{
  "swagger": "2.0",
  "info": {
    "description": "This documentation describes the process of authenticating with Thanx via Thanx SSO. Thanx SSO authenticates the user via a password-less flow using email authentication, rather than a password. This reduces the friction of a user having to manage yet another password as well as reduces the friction of transitioning an existing user-base to Thanx.\n\nThanx follows the standard OAuth 2.0 spec, using the Authorization Code grant type. Refer to the [OAuth 2.0 Authorization Framework RFC: Section 4.1](https://tools.ietf.org/html/rfc6749#section-4.1) for additional details.\n\nThere are two primary options for implementing SSO with Thanx:\n  * Thanx-hosted SSO Form\n  * Self-hosted SSO Form\n\n\n**Thanx-hosted SSO Form**\n![SSO with Thanx-hosted Form](assets/sso-thanx-hosted-form.png)\n1. User navigates to the merchant website and clicks an authentication button.\n2. The merchant website redirects to Thanx Auth, as described in the `GET /oauth/authorize` endpoint described below.\n3. User enters their email address in the Thanx-hosted form.\n4. If the email address is new to Thanx, the user is prompted to input their first and last name to create an account, after which an authorization code is returned to the `redirect_uri` (skip to step 6). If the email address already exists in Thanx, Thanx Auth sends an auth email to the specified email.\n5. The user clicks the auth email link which redirects to the merchant website at the specified `redirect_uri` with an authorization code in the params.\n6. Merchant website exchanges the authorization code for an access token via the `POST /oauth/token` endpoint described below. User is now authenticated with the Thanx system through the returned access token.\n\n**Self-hosted SSO Form**\n![SSO with Self-hosted Form](assets/sso-self-hosted-form-existing.png)\n![SSO with Self-hosted Form](assets/sso-self-hosted-form-new.png)\n1. User navigates to the merchant website and clicks an authentication button.\n2. The merchant website prompts the user to input an email address\n3. The merchant website makes a request to the `POST /oauth/authorize` endpoint described below. *(Continue to #4 or #5)*\n4. If no account exists for the specified email address, a 401 error is thrown. The merchant website should then reprompt the user to input a first name and last name and resend the request to `POST /oauth/authorize` with the `first_name` and `last_name` parameters. Upon successful creation of the user, a 201 HTTP response is returned with an authorization code in the response body. *(Continue to #6)*\n5. If an account exists for the specified email address, an auth email is sent to specified email. The user clicks the auth email link which redirects to the merchant website at the specified `redirect_uri` with an authorization code in the params.\n6. Merchant website exchanges the authorization code for an access token via the `POST /oauth/token` endpoint described below. User is now authenticated with the Thanx system through the returned access token.\n\n**Advanced**\n\nThanx SSO allows passing arbitrary metadata through SSO via the `state` param for both Thanx-hosted and self-hosted auth forms. Calls to either `GET` or `POST /oauth/authorize` will be passed through as a parameter to the `redirect_uri`",
    "version": "1.0.0",
    "title": "Thanx SSO",
    "contact": {
      "email": "developer-support@thanx.com"
    }
  },
  "host": "auth.thanxsandbox.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/oauth/authorize": {
      "get": {
        "tags": [
          "SSO"
        ],
        "summary": "Send user to authentication flow",
        "description": "This is the initial entrance into the authentication flow. This is where your Login with Thanx button should link to. Be sure to escape your redirect uri! You will receive a callback at the redirect_url specified with the session code in the parameters after authentication is completed. Here is an example: `https://auth.thanxsandbox.com/oauth/authorize?response_type=code&client_id=CLIENT_ID&redirect_uri=https%3A%2F%2Fwww.yourdomain.com%2Foauth%2Fcallback `",
        "operationId": "getCode",
        "parameters": [
          {
            "name": "response_type",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "This should be `code`"
          },
          {
            "name": "client_id",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "This is your client ID"
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "A redirect_uri (escaped!) where Thanx will redirect to once the user has authenticated. This must be part of a whitelist in Thanx."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "SSO"
        ],
        "summary": "Acquire authorization code",
        "description": "This flow is to support <b>passwordless</b> login.\n\nIf an account exists, an authentication email will be sent including a link that will eventually redirect to the `redirect_uri` with an authorization code.\n\n If an account does not exist for the specified email, a 401 error will be returned.\n \n If the optionally specified `first_name` and `last_name` parameters are included, an attempt to create an account will be made if the email does not already have an associated account. Upon success, a 201 success and an authorization code will be returned.",
        "operationId": "postCode",
        "parameters": [
          {
            "in": "body",
            "name": "",
            "schema": {
              "type": "object",
              "required": [
                "client_id",
                "redirect_uri",
                "response_type",
                "scope",
                "username"
              ],
              "properties": {
                "client_id": {
                  "type": "string",
                  "description": "This is your client ID",
                  "example": "CLIENT_ID"
                },
                "redirect_uri": {
                  "type": "string",
                  "description": "Where you want the user to be redirected.",
                  "example": "https://www.yourdomain.com/oauth/callback"
                },
                "response_type": {
                  "type": "string",
                  "description": "This value should be `code`",
                  "example": "code"
                },
                "scope": {
                  "type": "string",
                  "description": "This value should be `passwordless`",
                  "example": "passwordless"
                },
                "username": {
                  "type": "string",
                  "description": "The user's email",
                  "example": "john.smith@example.com"
                },
                "first_name": {
                  "type": "string",
                  "description": "The user's first name (Optionally specified for user creation)",
                  "example": "John"
                },
                "last_name": {
                  "type": "string",
                  "description": "The user's last name (Optionally specified for user creation)",
                  "example": "Smith"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication email sent",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "User created",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "The authorization code to be exchanged for an access token via `POST /oauth/token`.",
                  "example": "wwe14hfo23"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failure",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "access_denied"
                },
                "error_description": {
                  "type": "string",
                  "example": "The resource owner or authorization server denied the request."
                }
              }
            }
          }
        }
      }
    },
    "/oauth/token": {
      "post": {
        "tags": [
          "SSO"
        ],
        "summary": "Acquire access token",
        "description": "Use this endpoint to acquire a user's access token. This same endpoint supports refreshing an access token using the client_id, client_secret, and refresh_token, with grant_type set to `refresh_token`.",
        "operationId": "postToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "",
            "schema": {
              "type": "object",
              "properties": {
                "grant_type": {
                  "type": "string",
                  "description": "This should be `authorization_code`",
                  "example": "authorization_code"
                },
                "client_id": {
                  "type": "string",
                  "description": "This is your client ID",
                  "example": "CLIENT_ID"
                },
                "client_secret": {
                  "type": "string",
                  "description": "This is your client SECRET",
                  "example": "CLIENT_SECRET"
                },
                "code": {
                  "type": "string",
                  "description": "This is the code that you receive from Thanx in the redirect.",
                  "example": "wwe14hfo23"
                },
                "redirect_uri": {
                  "type": "string",
                  "description": "This should be the same as in your request for a code.",
                  "example": "https://www.yourdomain.com/oauth/callback"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "access_token": {
                  "type": "string",
                  "description": "The access token for the user",
                  "example": "09ba487fc3dfweroi"
                },
                "token_type": {
                  "type": "string",
                  "description": "The type of token",
                  "example": "bearer"
                },
                "expires_in": {
                  "type": "number",
                  "description": "In how many seconds the token will expire",
                  "example": 7200
                },
                "refresh_token": {
                  "type": "string",
                  "description": "Used to fetch a new access token",
                  "example": "w934hjg056j20935"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/revoke": {
      "post": {
        "tags": [
          "SSO"
        ],
        "summary": "Revoke access token",
        "description": "Use this endpoint to revoke a user's access token",
        "operationId": "revokeToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "",
            "schema": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string",
                  "description": "This is your client ID",
                  "example": "CLIENT_ID"
                },
                "client_secret": {
                  "type": "string",
                  "description": "This is your client SECRET",
                  "example": "CLIENT_SECRET"
                },
                "token": {
                  "type": "string",
                  "description": "The token",
                  "example": "09ba487fc3dfweroi"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  }
}
